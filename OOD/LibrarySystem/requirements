1. Any library member should be able to search books by their title, author, subject category as well by the publication date.
Search by title, author, subject category, publication date.

2. Each book will have a unique identification number and other details including a rack number which will help to physically locate the book.

public abstract class Book {
    private String title;
    private List<String> author;
    private String category;

    private String rack;
    private int numInStock;
    private List<Member> MembersWaiting;
}

3. There could be more than one copy of a book, and library members should be able to check-out and reserve any copy. We will call each copy of a book, a book item.

class BookItem extends Book {
    private String barCode;
    private String itemId;
    private Date publicationDate;

    private Date borrowedDate;
}

4. The system should be able to retrieve information like who took a particular book or what are the books checked-out by a specific library member.

abstract class Account {
    private final String username;
    String password;
    String name;
    String phone;
    String email;
    Address address;
}

class Member extends Account {
    private String barCode;
    private List<BookItem> booksCheckedOut;
    private int totalCheckedOut;

    public boolean reserveBookItem(BookItem bookItem);
    public boolean checkOutBookItem(BookItem bookItem);
}

class Librarian extends Account {
    public boolean addBookItem(BookItem bookItem);  // 添加到书库
    public boolean blockMember(Member member);
    public boolean unBlockMember(Member member);
}

5. There should be a maximum limit (5) on how many books a member can check-out.
class

Member.totalCheckedOut <= 5

6. There should be a maximum limit (10) on how many days a member can keep a book.

Date today = new Date();
TimeKept = today.getDate() - bookItem.borrowDate;
TimeKept <= 10;

7. The system should be able to collect fines for books returned after the due date.

int fine = (TimeKept - 10) / (24 * 60 * 60 * 1000) * finePerDay;

8. Members should be able to reserve books that are not currently available.

add field numInStock in class Book
numInStock < 0, means it's unavailable

9. The system should be able to send notifications whenever the reserved books become available, as well as when the book is not returned within the due date.

available: when Book.numInStock > 0;  Notification should come from a Book Instance
due: when TimeKept > 10;  Notification should come from a BookItem Instance


10. Each book and member card will have a unique barcode. The system will be able to read barcodes from books and members’ library cards.

add fields barCode in class Member & BookItem